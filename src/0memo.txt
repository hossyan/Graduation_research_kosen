プログラムの中身
void setup
・m5stack初期化
・加速度センサ初期化
・pinの初期化
・can初期化

void loop 
・センサ値の取得
　・加速度センサ
　・cybergearのエンコーダ
・pidの倒立振子
・if(ps4接続)
　・init_cybergear
　　・shareで初期化
　・leg_caliblation
　　・optionで原点設定
　・//tire_control
　　・左右のjoystick
　・leg_control
　　・tachpadで0,1を指示
　・gain_adjust
　　・△,×/上,下/R1,L1でのゲイン調整
　　・L2押しながらでのんびりゲイン調整










macアドレス 3C:61:05:0D:E5:DE

-----------------------------------------加速度センサ-------------------------------------------------------
float roll, pitch, yaw;
float pre_roll;

void setup() {
  M5.begin();
  M5.MPU6886.Init();
  M5.Lcd.setTextSize(2);       // テキストサイズ設定
  M5.Lcd.setTextColor(WHITE, BLACK);  // テキスト色を白に設定
  M5.Lcd.setCursor(10, 10);      // カーソル位置を初期化

  M5.Lcd.print("roll");
}

void loop() {
  M5.MPU6886.getAhrsData(&pitch, &roll, &yaw);
  Serial.printf("%5.1f,%5.1f,%5.1f\n",pitch,roll,yaw);

  if(roll != pre_roll){
  M5.Lcd.setCursor(20, 10);    // 左上にカーソルをセット
  M5.Lcd.fillRect(20, 10, 50, 20, BLACK);  // 数字部分を黒でクリア
  M5.Lcd.printf(" roll \t %f", roll);    // "a"の左に変数aの値を表示
  pre_roll = roll;
  }

  delay(10);
}


------------------ps4---------------------------
ps4.end();

if (PS4.isConnected()) 
    if (PS4.Right()) Serial.println("Right Button");
    if (PS4.Down()) Serial.println("Down Button");
    if (PS4.Up()) Serial.println("Up Button");
    if (PS4.Left()) Serial.println("Left Button");

    if (PS4.Square()) Serial.println("Square Button");
    if (PS4.Cross()) Serial.println("Cross Button");
    if (PS4.Circle()) Serial.println("Circle Button");
    if (PS4.Triangle()) Serial.println("Triangle Button");

    if (PS4.UpRight()) Serial.println("Up Right");
    if (PS4.DownRight()) Serial.println("Down Right");
    if (PS4.UpLeft()) Serial.println("Up Left");
    if (PS4.DownLeft()) Serial.println("Down Left");

    if (PS4.L1()) Serial.println("L1 Button");
    if (PS4.R1()) Serial.println("R1 Button");

    if (PS4.Share()) Serial.println("Share Button");
    if (PS4.Options()) Serial.println("Options Button");
    if (PS4.L3()) Serial.println("L3 Button");
    if (PS4.R3()) Serial.println("R3 Button");

    if (PS4.PSButton()) Serial.println("PS Button");
    if (PS4.Touchpad()) Serial.println("Touch Pad Button");

    if (PS4.L2()) {
      Serial.printf("L2 button at %d\n", PS4.L2Value());
    }
    if (PS4.R2()) {
      Serial.printf("R2 button at %d\n", PS4.R2Value());
    }

    if (PS4.LStickX()) {
      Serial.printf("Left Stick x at %d\n", PS4.LStickX());
    }
    if (PS4.LStickY()) {
      Serial.printf("Left Stick y at %d\n", PS4.LStickY());
    }
    if (PS4.RStickX()) {
      Serial.printf("Right Stick x at %d\n", PS4.RStickX());
    }
    if (PS4.RStickY()) {
      Serial.printf("Right Stick y at %d\n", PS4.RStickY());
    }

    if (PS4.Charging()) Serial.println("The controller is charging");
    if (PS4.Audio()) Serial.println("The controller has headphones attached");
    if (PS4.Mic()) Serial.println("The controller has a mic attached");

    Serial.printf("Battery Level : %d\n", PS4.Battery());

--------------------cybergear_chatgpt------------
#include <M5Stack.h>
#include <mcp_can.h>

// MCP2515 CANオブジェクトを作成
MCP_CAN CAN0(12);  // CSピンをGPIO 10に設定

// 送信する電流値（後から調整可能）
float target_current = 5.0;  // 5Aの電流
uint8_t motor_id = 0x01;     // モーターのCAN ID

// CANの初期化関数
void init_can() {
  if (CAN0.begin(MCP_ANY, CAN_1000KBPS, MCP_8MHZ) == CAN_OK) {
    Serial.println("MCP2515 Initialized Successfully!");
  } else {
    Serial.println("Error Initializing MCP2515...");
  }
  CAN0.setMode(MCP_NORMAL); 
}

// 電流指令を送信する関数
void sendCurrentCommand(float current) {
  // 電流値を0〜65535の整数に変換
  uint16_t iq_value = (uint16_t)((current + 23) / 46.0 * 65535);

  // CANメッセージの準備
  uint8_t data[8] = { 
    (uint8_t)(iq_value >> 8),  // 上位バイト
    (uint8_t)(iq_value & 0xFF), // 下位バイト
    0, 0, 0, 0, 0, 0  // 残りは0で埋める
  };

  // メッセージを送信
  CAN0.sendMsgBuf(0x12, 0, 8, data);  // ID: 0x12, DLC: 8
  M5.Lcd.printf("Sent: %.2f A\n", current);
}

void setup() {
  M5.begin();             // M5Stackの初期化
  Serial.begin(115200);   // シリアルモニタの初期化
  init_can();             // CANの初期化

  M5.Lcd.println("Starting current control...");
}

void loop() {
  // 電流5Aを1秒間送信
  sendCurrentCommand(target_current);
  delay(1000);

  // 電流0Aを送信して停止
  sendCurrentCommand(0);
  M5.Lcd.println("Motor stopped.");

  // 無限ループで終了
  while (1) {}
}

-----------------cybergear_2つ
#include <Arduino.h>
#include <math.h>
#include <M5Stack.h>
#include "cybergear_controller.hh"

#include "cybergear_can_interface_mcp.hh"

// cybergear,dji,masterのCANID
uint8_t MASTER_CAN_ID = 0x00;
uint8_t Rleg_CAN_ID = 0x7F;
uint8_t Lleg_CAN_ID = 0x7E;
uint16_t DJI_CAN_ID = 0x200;
std::vector<uint8_t> motor_ids = {Rleg_CAN_ID, Lleg_CAN_ID};
std::vector<float> currents = {0.0f, 0.0f};


// init cybergeardriver
CybergearController controller = CybergearController(MASTER_CAN_ID);
// MotorStatus motor_status;
CybergearCanInterfaceMcp interface;


// cybergear(leg_unit)各種パラメータ
float current_limit = 10.0;
float init_speed = 30.0f; 

float Rleg_current = 0.0;
float Rleg_kp = 0.0f; 
float Rleg_kd = 0.0f;
float Rleg_ki = 0.0f;  

void setup()
{
    M5.begin();

    // init position offset
    M5.Lcd.print("Init motors ... ");
    interface.init();
    controller.init(motor_ids, MODE_CURRENT, &interface);
    controller.enable_motors();
    M5.Lcd.println("done");

    // driver.init(&interface);
    // driver.init_motor(MODE_POSITION);  
    // driver.enable_motor();
    // driver.set_position_ref(target_pos);

    // driver.init_motor(MODE_CURRENT);
    // driver.set_limit_speed(init_speed);
    // driver.enable_motor();
    // M5.Lcd.println("done");

    // display current status
    //   draw_display(mode, true);
}

void loop()
{
    // update m5 satatus
    M5.update();

    controller.send_current_command(motor_ids, currents);

    // driver.set_current_ref(target_torque);

    // update and get motor data
    // if (driver.process_packet())
    // {
    //     motor_status = driver.get_motor_status();
    //     deg = motor_status.position * 60 / (2 * M_PI);
    // }
    std::vector<MotorStatus> status_list;
    if ( controller.process_packet() ) {
        controller.get_motor_status(status_list);
    }

    if (M5.BtnA.wasPressed())
    {
        currents[0] -= 0.2;
    }
    if (M5.BtnC.wasPressed())
    {
        currents[0] += 0.2;
    }

    Serial.printf("%f",status_list[0].position);
    Serial.println();

    delay(10);
}










#include <Arduino.h>
#include <M5Stack.h>
#include <mcp_can.h>
#include "cybergear_controller.hh"
#include "cybergear_can_interface_mcp.hh"

// CAN IDの定義
uint8_t MASTER_CAN_ID = 0x00;
uint8_t Rleg_CAN_ID = 0x7F;
uint8_t Lleg_CAN_ID = 0x7E; // 今回はこのモータのエンコーダ値を取得

std::vector<uint8_t> motor_ids = {Rleg_CAN_ID, Lleg_CAN_ID};
std::vector<float> currents = {0.0f, 0.0f};

CybergearController controller = CybergearController(MASTER_CAN_ID);
CybergearCanInterfaceMcp interface;

unsigned char data[8] = {0}; // CANデータのバッファ
long unsigned int rxId;      // 受信したCAN IDを保持する変数
unsigned char len = 0;
unsigned char rxBuf[8];      // 受信データ用のバッファ
char msgString[128];

#define CAN0_INT 15 // 割り込みピン
MCP_CAN CAN0(12);   // CSピンを12に設定

void requestEncoderValue(uint8_t motor_id); 

void setup()
{
  M5.begin();
  M5.Lcd.print("Init motors ... ");

  interface.init();  // CAN初期化を省略してinterface.init()で対応
  controller.init(motor_ids, MODE_CURRENT, &interface);
  controller.enable_motors();

  M5.Lcd.println("done");
}

void loop()
{
    // エンコーダ値取得リクエストを送信
    requestEncoderValue(Lleg_CAN_ID);

    // CANメッセージの受信処理
    if (!digitalRead(CAN0_INT)) {
        CAN0.readMsgBuf(&rxId, &len, rxBuf);

        // 受信したIDをログに表示
        Serial.printf("Received CAN ID: 0x%.8lX  DLC: %d\n", (rxId & 0x1FFFFFFF), len);

        // 期待する応答フレームのID
        long unsigned int expectedId = (17 << 24) | (Lleg_CAN_ID << 8) | MASTER_CAN_ID;

        if ((rxId & 0x00FFFFFF) == (expectedId & 0x00FFFFFF)) {
          Serial.println("Matching response ID received.");
          for (int i = 0; i < len; i++) {
          Serial.printf("0x%02X ", rxBuf[i]);
          }
          Serial.println();

        // エンコーダ値のfloat変換
        float encoder_value;
        memcpy(&encoder_value, &rxBuf[4], sizeof(float));
        Serial.printf("Encoder Value (float): %f\n", encoder_value);
        } else {
          Serial.printf("Unexpected CAN ID with different upper bits: 0x%.8lX\n", rxId);
        }
    } else {
        Serial.println("No CAN message received.");
    }
}

// エンコーダ値の取得リクエストを送信する関数
void requestEncoderValue(uint8_t motor_id) {
    long unsigned int txId = (17 << 24) | (MASTER_CAN_ID << 8) | motor_id;

    // データのセット（Index: 0x7019 に修正）
    data[0] = 0x19;
    data[1] = 0x70;
    data[2] = 0x00;
    data[3] = 0x00;
    data[4] = 0x00;
    data[5] = 0x00;
    data[6] = 0x00;
    data[7] = 0x00;

    // CAN送信
    if (CAN0.sendMsgBuf(txId, 1, 8, data) == CAN_OK) {
        Serial.printf("Sent Request CAN ID: 0x%.8lX\n", txId);  // txIdの出力
    } else {
        Serial.println("Failed to send encoder value request.");
    }
}